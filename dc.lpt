int nA=...;
int nR=...;
int nP=...;
int nS=...;
int nE=...;
int nT=...;
int nA0=...;
int nA1=...;

range A=1..nA;
range P=1..nP;
range R=1..nR;
range S=1..nS;
range E=1..nE;
range T=1..nT;
range A0=1..nA0;
range A1=1..nA1;

int mA[a in A, s in S]=...;
int mA0[r in R, a0 in A0, s in S]=...;
int mA1[r in R, a1 in A1, s in S]=...;

int beta_ra0a1[r in R, a0 in mA0, a1 in mA1]=...;
int omega_a0r[a0 in mA0, r in R]=...;
int delta_a0s[a0 in mA0, s in S]=...;
int delta_a1s[a1 in mA1, s in S]=...;
int gamma_a0t[a0 in mA0, t in T]=...;
int gamma_a1t[a1 in mA1, t in T]=...;
int rho_re[r in R, e in E]=...;
int alpha_est[e in E, s in S, t in T]=...;

dvar boolean x_ap[a in mA, p in P];
dvar boolean x_ar_0[r in R, a0 in mA0];
dvar boolean x_ar_1[r in R, a1 in mA1];
dvar boolean x_a1r_1[r in R, a1 in mA1];
dvar boolean y_r[r in R];
dvar float+ z;


// Objective
minimize z;

subject to{
	// Constraint 1
	sum(a in mA) (sum(p in P) x_ap[a,p]) == 1; 
 	  
	//Constraint 2
	forall(r in R) {
		sum(a in mA0[r]) x_ar_0[a,r] == 1;
	}
		  
	//Constraint 3
	forall(r in R) {
		sum(a in mA1[r]) x_ar_1[a,r] == 1;
	}
	
	//Constraint 4
	forall(r in R){
		forall(a0 in mA0[r]){
			sum(a1 in mA1[r]) beta_ra0a1[r,a0,a1] * x_a1r_1[a1,r] >= x_ar_0[a0,r];
		}
	}

	//Constraint 5
	forall(r in R){
		forall(a in mA0[r]){
			x_ar_0[a,r] - omega_ar[a,r] <= y_r[r];
		}
	}

	//Constraint 6
	forall(e in E){
		forall(s in S){
			forall(t in T){
				sum(r in R) (sum(a in mA0[r]) delta_as[a,s] * gamma_at[a,t] * rho_re[r,e] * x_ar_0[a,r]) 
				+ sum(r in R) (sum(a in A1[r]) delta_as[a,s] * gamma_at[a,t] * rho_re[r,e] * x_ar_1[a,r]) <= 1;
			}
		}
	}

	z = sum(r in R) y_r[r];

}




